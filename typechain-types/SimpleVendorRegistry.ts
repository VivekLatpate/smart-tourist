/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimpleVendorRegistry {
  export type VendorStruct = {
    vendorAddress: AddressLike;
    metadataHash: string;
    cancellationPolicyHash: string;
    reputationScore: BigNumberish;
    isVerified: boolean;
    exists: boolean;
  };

  export type VendorStructOutput = [
    vendorAddress: string,
    metadataHash: string,
    cancellationPolicyHash: string,
    reputationScore: bigint,
    isVerified: boolean,
    exists: boolean
  ] & {
    vendorAddress: string;
    metadataHash: string;
    cancellationPolicyHash: string;
    reputationScore: bigint;
    isVerified: boolean;
    exists: boolean;
  };
}

export interface SimpleVendorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "getAllVendors"
      | "getVendor"
      | "getVendorById"
      | "nextVendorId"
      | "registerVendor"
      | "totalVendors"
      | "updateReputation"
      | "vendorIds"
      | "vendors"
      | "verifyVendor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ReputationUpdated"
      | "VendorRegistered"
      | "VendorVerified"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllVendors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVendor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVendorById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextVendorId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVendor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVendors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vendorIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vendors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVendor",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVendors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVendor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVendorById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextVendorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVendor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVendors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vendorIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vendors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyVendor",
    data: BytesLike
  ): Result;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [vendor: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [vendor: string, newScore: bigint];
  export interface OutputObject {
    vendor: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VendorRegisteredEvent {
  export type InputTuple = [vendor: AddressLike, vendorId: BigNumberish];
  export type OutputTuple = [vendor: string, vendorId: bigint];
  export interface OutputObject {
    vendor: string;
    vendorId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VendorVerifiedEvent {
  export type InputTuple = [vendor: AddressLike, verified: boolean];
  export type OutputTuple = [vendor: string, verified: boolean];
  export interface OutputObject {
    vendor: string;
    verified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleVendorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleVendorRegistry;
  waitForDeployment(): Promise<this>;

  interface: SimpleVendorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  getAllVendors: TypedContractMethod<
    [],
    [SimpleVendorRegistry.VendorStructOutput[]],
    "view"
  >;

  getVendor: TypedContractMethod<
    [_vendor: AddressLike],
    [SimpleVendorRegistry.VendorStructOutput],
    "view"
  >;

  getVendorById: TypedContractMethod<
    [_vendorId: BigNumberish],
    [SimpleVendorRegistry.VendorStructOutput],
    "view"
  >;

  nextVendorId: TypedContractMethod<[], [bigint], "view">;

  registerVendor: TypedContractMethod<
    [_metadataHash: string, _cancellationPolicyHash: string],
    [void],
    "nonpayable"
  >;

  totalVendors: TypedContractMethod<[], [bigint], "view">;

  updateReputation: TypedContractMethod<
    [_vendor: AddressLike, _newScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  vendorIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  vendors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, boolean] & {
        vendorAddress: string;
        metadataHash: string;
        cancellationPolicyHash: string;
        reputationScore: bigint;
        isVerified: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  verifyVendor: TypedContractMethod<
    [_vendor: AddressLike, _verified: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllVendors"
  ): TypedContractMethod<
    [],
    [SimpleVendorRegistry.VendorStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVendor"
  ): TypedContractMethod<
    [_vendor: AddressLike],
    [SimpleVendorRegistry.VendorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVendorById"
  ): TypedContractMethod<
    [_vendorId: BigNumberish],
    [SimpleVendorRegistry.VendorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextVendorId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerVendor"
  ): TypedContractMethod<
    [_metadataHash: string, _cancellationPolicyHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalVendors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [_vendor: AddressLike, _newScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vendorIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vendors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, boolean] & {
        vendorAddress: string;
        metadataHash: string;
        cancellationPolicyHash: string;
        reputationScore: bigint;
        isVerified: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyVendor"
  ): TypedContractMethod<
    [_vendor: AddressLike, _verified: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VendorRegistered"
  ): TypedContractEvent<
    VendorRegisteredEvent.InputTuple,
    VendorRegisteredEvent.OutputTuple,
    VendorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VendorVerified"
  ): TypedContractEvent<
    VendorVerifiedEvent.InputTuple,
    VendorVerifiedEvent.OutputTuple,
    VendorVerifiedEvent.OutputObject
  >;

  filters: {
    "ReputationUpdated(address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "VendorRegistered(address,uint256)": TypedContractEvent<
      VendorRegisteredEvent.InputTuple,
      VendorRegisteredEvent.OutputTuple,
      VendorRegisteredEvent.OutputObject
    >;
    VendorRegistered: TypedContractEvent<
      VendorRegisteredEvent.InputTuple,
      VendorRegisteredEvent.OutputTuple,
      VendorRegisteredEvent.OutputObject
    >;

    "VendorVerified(address,bool)": TypedContractEvent<
      VendorVerifiedEvent.InputTuple,
      VendorVerifiedEvent.OutputTuple,
      VendorVerifiedEvent.OutputObject
    >;
    VendorVerified: TypedContractEvent<
      VendorVerifiedEvent.InputTuple,
      VendorVerifiedEvent.OutputTuple,
      VendorVerifiedEvent.OutputObject
    >;
  };
}
