/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StandaloneBookingEscrow {
  export type BookingStruct = {
    bookingId: BigNumberish;
    traveler: AddressLike;
    vendor: AddressLike;
    checkInTime: BigNumberish;
    checkOutTime: BigNumberish;
    roomDetailsHash: string;
    bufferTime: BigNumberish;
    totalAmount: BigNumberish;
    status: BigNumberish;
    exists: boolean;
  };

  export type BookingStructOutput = [
    bookingId: bigint,
    traveler: string,
    vendor: string,
    checkInTime: bigint,
    checkOutTime: bigint,
    roomDetailsHash: string,
    bufferTime: bigint,
    totalAmount: bigint,
    status: bigint,
    exists: boolean
  ] & {
    bookingId: bigint;
    traveler: string;
    vendor: string;
    checkInTime: bigint;
    checkOutTime: bigint;
    roomDetailsHash: string;
    bufferTime: bigint;
    totalAmount: bigint;
    status: bigint;
    exists: boolean;
  };
}

export interface StandaloneBookingEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "bookings"
      | "cancelBooking"
      | "checkIn"
      | "confirmBooking"
      | "createBooking"
      | "getBooking"
      | "getTotalBookings"
      | "getTotalEscrowAmount"
      | "getTravelerBookings"
      | "getVendorBookings"
      | "nextBookingId"
      | "raiseDispute"
      | "releasePayment"
      | "resolveDispute"
      | "totalBookings"
      | "totalEscrowAmount"
      | "travelerBookings"
      | "vendorBookings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingCancelled"
      | "BookingConfirmed"
      | "BookingCreated"
      | "BookingDisputed"
      | "PaymentReleased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBooking",
    values: [AddressLike, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBooking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBookings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEscrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTravelerBookings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVendorBookings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBookingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBookings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEscrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "travelerBookings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vendorBookings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBooking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBooking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTravelerBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVendorBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBookingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "travelerBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vendorBookings",
    data: BytesLike
  ): Result;
}

export namespace BookingCancelledEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    refundAmount: BigNumberish
  ];
  export type OutputTuple = [bookingId: bigint, refundAmount: bigint];
  export interface OutputObject {
    bookingId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingConfirmedEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingCreatedEvent {
  export type InputTuple = [
    bookingId: BigNumberish,
    traveler: AddressLike,
    vendor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    bookingId: bigint,
    traveler: string,
    vendor: string,
    amount: bigint
  ];
  export interface OutputObject {
    bookingId: bigint;
    traveler: string;
    vendor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BookingDisputedEvent {
  export type InputTuple = [bookingId: BigNumberish];
  export type OutputTuple = [bookingId: bigint];
  export interface OutputObject {
    bookingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReleasedEvent {
  export type InputTuple = [bookingId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [bookingId: bigint, amount: bigint];
  export interface OutputObject {
    bookingId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StandaloneBookingEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): StandaloneBookingEscrow;
  waitForDeployment(): Promise<this>;

  interface: StandaloneBookingEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  bookings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        bookingId: bigint;
        traveler: string;
        vendor: string;
        checkInTime: bigint;
        checkOutTime: bigint;
        roomDetailsHash: string;
        bufferTime: bigint;
        totalAmount: bigint;
        status: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  cancelBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkIn: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createBooking: TypedContractMethod<
    [
      _vendor: AddressLike,
      _checkInTime: BigNumberish,
      _checkOutTime: BigNumberish,
      _roomDetailsHash: string,
      _bufferTime: BigNumberish
    ],
    [void],
    "payable"
  >;

  getBooking: TypedContractMethod<
    [_bookingId: BigNumberish],
    [StandaloneBookingEscrow.BookingStructOutput],
    "view"
  >;

  getTotalBookings: TypedContractMethod<[], [bigint], "view">;

  getTotalEscrowAmount: TypedContractMethod<[], [bigint], "view">;

  getTravelerBookings: TypedContractMethod<
    [_traveler: AddressLike],
    [bigint[]],
    "view"
  >;

  getVendorBookings: TypedContractMethod<
    [_vendor: AddressLike],
    [bigint[]],
    "view"
  >;

  nextBookingId: TypedContractMethod<[], [bigint], "view">;

  raiseDispute: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releasePayment: TypedContractMethod<
    [_bookingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [
      _bookingId: BigNumberish,
      _winner: AddressLike,
      _travelerAmount: BigNumberish,
      _vendorAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  totalBookings: TypedContractMethod<[], [bigint], "view">;

  totalEscrowAmount: TypedContractMethod<[], [bigint], "view">;

  travelerBookings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  vendorBookings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        bookingId: bigint;
        traveler: string;
        vendor: string;
        checkInTime: bigint;
        checkOutTime: bigint;
        roomDetailsHash: string;
        bufferTime: bigint;
        totalAmount: bigint;
        status: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelBooking"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmBooking"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createBooking"
  ): TypedContractMethod<
    [
      _vendor: AddressLike,
      _checkInTime: BigNumberish,
      _checkOutTime: BigNumberish,
      _roomDetailsHash: string,
      _bufferTime: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBooking"
  ): TypedContractMethod<
    [_bookingId: BigNumberish],
    [StandaloneBookingEscrow.BookingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBookings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalEscrowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTravelerBookings"
  ): TypedContractMethod<[_traveler: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVendorBookings"
  ): TypedContractMethod<[_vendor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextBookingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<[_bookingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [
      _bookingId: BigNumberish,
      _winner: AddressLike,
      _travelerAmount: BigNumberish,
      _vendorAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBookings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEscrowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "travelerBookings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vendorBookings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BookingCancelled"
  ): TypedContractEvent<
    BookingCancelledEvent.InputTuple,
    BookingCancelledEvent.OutputTuple,
    BookingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "BookingConfirmed"
  ): TypedContractEvent<
    BookingConfirmedEvent.InputTuple,
    BookingConfirmedEvent.OutputTuple,
    BookingConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "BookingCreated"
  ): TypedContractEvent<
    BookingCreatedEvent.InputTuple,
    BookingCreatedEvent.OutputTuple,
    BookingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BookingDisputed"
  ): TypedContractEvent<
    BookingDisputedEvent.InputTuple,
    BookingDisputedEvent.OutputTuple,
    BookingDisputedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReleased"
  ): TypedContractEvent<
    PaymentReleasedEvent.InputTuple,
    PaymentReleasedEvent.OutputTuple,
    PaymentReleasedEvent.OutputObject
  >;

  filters: {
    "BookingCancelled(uint256,uint256)": TypedContractEvent<
      BookingCancelledEvent.InputTuple,
      BookingCancelledEvent.OutputTuple,
      BookingCancelledEvent.OutputObject
    >;
    BookingCancelled: TypedContractEvent<
      BookingCancelledEvent.InputTuple,
      BookingCancelledEvent.OutputTuple,
      BookingCancelledEvent.OutputObject
    >;

    "BookingConfirmed(uint256)": TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;
    BookingConfirmed: TypedContractEvent<
      BookingConfirmedEvent.InputTuple,
      BookingConfirmedEvent.OutputTuple,
      BookingConfirmedEvent.OutputObject
    >;

    "BookingCreated(uint256,address,address,uint256)": TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;
    BookingCreated: TypedContractEvent<
      BookingCreatedEvent.InputTuple,
      BookingCreatedEvent.OutputTuple,
      BookingCreatedEvent.OutputObject
    >;

    "BookingDisputed(uint256)": TypedContractEvent<
      BookingDisputedEvent.InputTuple,
      BookingDisputedEvent.OutputTuple,
      BookingDisputedEvent.OutputObject
    >;
    BookingDisputed: TypedContractEvent<
      BookingDisputedEvent.InputTuple,
      BookingDisputedEvent.OutputTuple,
      BookingDisputedEvent.OutputObject
    >;

    "PaymentReleased(uint256,uint256)": TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
    PaymentReleased: TypedContractEvent<
      PaymentReleasedEvent.InputTuple,
      PaymentReleasedEvent.OutputTuple,
      PaymentReleasedEvent.OutputObject
    >;
  };
}
